// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id       Int      @id @default(autoincrement())
  name     String
  permissions Permission[]
}

// Modules table
model Module {
  id   Int    @id @default(autoincrement())
  name String
  permissions Permission[]
}

// Permissions table
model Permission {
  id              Int      @id @default(autoincrement())
  role            Role     @relation(fields: [roleId], references: [id])
  roleId          Int
  module          Module   @relation(fields: [moduleId], references: [id])
  moduleId        Int
  read_permission Boolean
  write_permission Boolean
  update_permission Boolean
  delete_permission Boolean
}

model User {
  id                 Int       @id @default(autoincrement())
  first_name         String    @db.VarChar(255)
  last_name          String    @db.VarChar(255)
  father_name        String    @db.VarChar(255)
  mother_name        String    @db.VarChar(255)
  email              String    @unique
  mobile             String
  password           String
  role               Role      @relation(fields: [role_id], references: [id])
  role_id            String
  profile_picture    String    @db.VarChar(255)
  is_active          Boolean   @default(true)
  gender             String
  dob                DateTime
  marital_status     Boolean
  qualification      String
  work_experience    String
  address            Address   @relation(fields: [address_id], references: [id])
  address_id         Int
  employee           Employee? @relation(fields: [employee_id], references: [id])
  employee_id        Int?
  bank_details       BankAccount? @relation(fields: [bank_details_id], references: [id])
  bank_details_id    Int?
  social_media_links String[]
}

model Employee {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [user_id], references: [id])
  user_id        Int
  staff_id       Int          @unique
  designation    Designation  @relation(fields: [designation_id], references: [id])
  designation_id Int
  department     Department   @relation(fields: [department_id], references: [id])
  department_id  Int
  salary         Int
  deduction      Int
  contract_type  String
  DOJ            DateTime
  DOL            DateTime?
  work_shift     String
  work_location  String
}

model Department {
  id          Int         @id @default(autoincrement())
  department  String
  employees   Employee[]
}

model Designation {
  id           Int          @id @default(autoincrement())
  designation  String
  employees    Employee[]
}

model Student {
  id                   Int         @id @default(autoincrement())
  admission_no         Int         @unique
  student_session      Session     @relation(fields: [student_session_id], references: [id])
  student_session_id   Int
  roll_no              Int
  category             String
  class                Class       @relation(fields: [class_id], references: [id])
  class_id             Int
  section              Section     @relation(fields: [section_id], references: [id])
  section_id           Int
  gender               String
  first_name           String
  last_name            String
  middle_name          String
  dob                  DateTime
  religion             String
  caste                String
  mobile               String
  email                String
  blood_group          String
  height               String
  weight               String
  medical_history      String
  aadhar_card          String
  admission_date       DateTime
  profile_picture      String
  other_docs           String
  password             String
  address              Address     @relation(fields: [address_id], references: [id])
  address_id           Int
  parent_details       ParentDetails @relation(fields: [parent_details_id], references: [id])
  parent_details_id    Int
  bank_details         BankAccount? @relation(fields: [bank_details_id], references: [id])
  bank_details_id      Int
  result               Result?     @relation(fields: [result_id], references: [id])
  result_id            Int?
}

model Result{
  
}
model Course {
  id          Int        @id @default(autoincrement())
  name        String
  session     Session    @relation(fields: [session_id], references: [id])
  session_id  Int
}

model Semester {
  id         Int      @id @default(autoincrement())
  semester   String
  course     Course   @relation(fields: [course_id], references: [id])
  course_id  Int
}

model Class {
  id          Int       @id @default(autoincrement())
  class_name  String
  is_active   Boolean
  sections    Section[]
}


model Section {
  id        Int      @id @default(autoincrement())
  class     Class    @relation(fields: [class_id], references: [id])
  class_id  Int
  section   String
  students  Student[]
}


model ParentDetails {
  id             Int      @id @default(autoincrement())
  relation_type  String
  name           String
  occupation     String
  phone          String
  student        Student  @relation(fields: [student_id], references: [id])
  student_id     Int
}



model Session {
  id          Int       @id @default(autoincrement())
  session     String
  is_active   Boolean
}

model Address {
  id           Int      @id @default(autoincrement())
  address_type String
  house_no     String
  address_line_1 String
  address_line_2 String
  user         User?    @relation(fields: [user_id], references: [id])
  user_id      Int?
  student      Student? @relation(fields: [student_id], references: [id])
  student_id   Int?
}

model BankAccount {
  id           Int      @id @default(autoincrement())
  bank_name    String
  pan_number   String?
  ifsc         String
  branch       String
  account_no   String
  user         User?    @relation(fields: [user_id], references: [id])
  user_id      Int?
  student      Student? @relation(fields: [student_id], references: [id])
  student_id   Int?
}

model ActivityLog {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [user_id], references: [id])
  user_id  Int
  role     Role   @relation(fields: [role_id], references: [id])
  role_id  Int
  action   String
}


model LeaveTypes {
  id    Int    @id @default(autoincrement())
  name  String
}

model Leaves {
  id          Int         @id @default(autoincrement())
  leave_type  LeaveTypes  @relation(fields: [leave_type_id], references: [id])
  leave_type_id Int
  apply_date  DateTime
  from_date   DateTime
  to_date     DateTime
  reason      String
  attachment  String?
}

model Notice {
  id          Int      @id @default(autoincrement())
  title       String
  notice_date DateTime
  publish_on  DateTime
  message_to  String[]
  message     String
  attachment  String?
}

model Income {
  id            Int       @id @default(autoincrement())
  income_head   IncomeHead @relation(fields: [income_head_id], references: [id])
  income_head_id Int
  name          String
  invoice_number Int
  date          DateTime
  amount        Float
  attached_doc  String?
  description   String
}

model IncomeHead {
  id           Int    @id @default(autoincrement())
  income_head  String
  description  String
}

model Expense {
  id              Int       @id @default(autoincrement())
  expense_head    ExpenseHead @relation(fields: [expense_head_id], references: [id])
  expense_head_id Int
  name            String
  invoice_number  Int
  date            DateTime
  amount          Float
  attached_doc    String?
  description     String
}

model ExpenseHead {
  id            Int    @id @default(autoincrement())
  expense_head  String
  description   String
}

model Attendance {
  id        Int       @id @default(autoincrement())
  staff     Employee  @relation(fields: [staff_id], references: [id])
  staff_id  Int
  date      DateTime
  attendance String    
}

model Payroll {
  id                  Int       @id @default(autoincrement())
  employee            Employee  @relation(fields: [employee_id], references: [id])
  employee_id         Int
  month               String
  year                String
  status              String    
  earning             Float
  deduction           Float
  net_amount          Float
  is_staff_loan       Boolean
  loan_deduction_amount Float
}

model FeesPayment {
  id                       Int        @id @default(autoincrement())
  student                  Student    @relation(fields: [student_id], references: [id])
  student_id               Int
  feesMaster               FeesMaster @relation(fields: [fees_master_id], references: [id])
  fees_master_id           Int
  dos                      DateTime
  approved_or_rejected_date DateTime?
  status                   String
  amount                   Float
  payment_from             String
  payment_mode             String     
  payment_proof            String
  comment                  String?
}

model FeesType {
  id              Int      @id @default(autoincrement())
  course          Course   @relation(fields: [course_id], references: [id])
  course_id       Int
  semester        String
  amount          Float
  extra_fees_type String
  extra_amount    String
  due_date        DateTime
}

model FeesMaster {
  id              Int      @id @default(autoincrement())
  student         Student  @relation(fields: [student_id], references: [id])
  student_id      Int
  feesType        FeesType @relation(fields: [fees_type_id], references: [id])
  fees_type_id    Int
  fine_name       String
  fine_amount     Float
  discount_name   String
  discount_amount Float
  net_amount      Float
}

model StaffLoan {
  id                  Int      @id @default(autoincrement())
  employee            Employee @relation(fields: [employee_id], references: [id])
  employee_id         Int
  loan_amount         Float
  no_of_installments  Int
  installment_amount  Float
  status              String
  action_by           Int      
}